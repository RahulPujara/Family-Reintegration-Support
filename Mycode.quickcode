<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Family Reintegration Support</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Inter Font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        /* Custom CSS for the subtle background pattern in the hero section */
        .bg-pattern {
            background-image: radial-gradient(#ffffff33 1px, transparent 1px),
                              radial-gradient(#ffffff33 1px, transparent 1px);
            background-size: 40px 40px;
            background-position: 0 0, 20px 20px;
        }
        /* Ensure the body uses the Inter font and has no default margin */
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
        }
        /* Basic styling for pre-formatted content generated by LLM */
        .prose ul {
            list-style-type: disc;
            margin-left: 1.25rem; /* Equivalent to pl-5 in Tailwind */
            padding-left: 0;
        }
        .prose li {
            margin-bottom: 0.5rem;
            line-height: 1.5;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <!-- React and ReactDOM CDN -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <!-- Firebase CDN scripts -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.6.0/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.6.0/firebase-auth.js";
        import { getFirestore, collection, addDoc, serverTimestamp, query, orderBy, onSnapshot } from "https://www.gstatic.com/firebasejs/10.6.0/firebase-firestore.js";

        // Make Firebase objects globally available for the Babel-transformed React code
        window.firebase = { initializeApp, getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, getFirestore, collection, addDoc, serverTimestamp, query, orderBy, onSnapshot };
    </script>

    <script type="text/babel">
        // Declare global variables for Firebase configuration.
        // In the Canvas environment, these are automatically provided.
        // For local development, they will be undefined, so we provide fallbacks.
        const __app_id = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const __firebase_config = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
        const __initial_auth_token = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // Destructure Firebase functions from the global window object
        const { initializeApp, getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, getFirestore, collection, addDoc, serverTimestamp, query, orderBy, onSnapshot } = window.firebase;

        // Define resources for Canada and India
        const countryResources = {
          canada: {
            heroTitle: "Supporting Our Heroes, Strengthening Their Families",
            heroDescription: "A dedicated program designed to assist Canadian Armed Forces members and their families in navigating the unique challenges of reintegration after service.",
            whyReintegration: {
              title: "The Importance of Family Reintegration in Canada",
              paragraphs: [
                "Reintegrating into family life after military service presents unique dynamics for Canadian Armed Forces members. The transition period, often following deployments or demanding service, can bring significant adjustments for both the service member and their family. Understanding these changes and having access to appropriate resources are crucial for fostering strong, healthy relationships.",
                "Our program aims to provide tailored tools and support for CAF members and their loved ones to reconnect effectively, enhance communication, and build a stable and supportive home environment. This includes acknowledging the sacrifices made by families and empowering them with strategies to thrive post-service."
              ],
              listItems: [
                "Building resilient family bonds through shared understanding and activities.",
                "Enhancing communication skills to navigate post-service changes and emotions.",
                "Addressing the emotional and psychological well-being of all family members.",
                "Connecting with Canadian-specific community support networks and veteran services."
              ],
              image: "https://placehold.co/500x300/4F46E5/FFFFFF?text=CAF+Family+Support" // Specific image for Canada
            },
            resources: [
              {
                title: "Mental Health & Wellness (CAF)",
                description: "Access to confidential counseling, trauma-informed care, and stress management programs through Veterans Affairs Canada and military family resource centres.",
                link: "#"
              },
              {
                title: "Family Counseling & Support (CAF)",
                description: "Information on military family resource centres (MFRCs), family therapy options, and workshops focused on communication and resilience for spouses and children.",
                link: "#"
              },
              {
                title: "Financial & Employment Aid (CAF)",
                description: "Guidance on Veterans Affairs Canada benefits, career transition services (e.g., SISIP Financial), and employment programs for veterans and their families.",
                link: "#"
              },
              {
                title: "Community Integration (CAF)",
                description: "Links to Royal Canadian Legion branches, local veteran associations, and community events to help integrate and connect with the veteran community.",
                link: "#"
              },
              {
                title: "Children & Youth Support (CAF)",
                description: "Resources for children of CAF members, including educational support programs, peer networks, and counseling services tailored to their unique experiences.",
                link: "#"
              },
              {
                title: "Legal & Administrative Aid (CAF)",
                description: "Information on CAF administrative processes, disability benefits applications, and legal assistance referrals for service-related matters.",
                link: "#"
              }
            ],
            testimonials: [
              {
                quote: "Coming home was harder than I thought. This program helped my wife and I understand each other again. The communication workshops were a game-changer.",
                author: "Sgt. Mark T., Canadian Army Veteran"
              },
              {
                quote: "My kids really struggled with their dad being away. The children's support resources gave them a safe space to talk and cope.",
                author: "Sarah L., Spouse of a CAF Member"
              }
            ],
            videoPlaceholderText: "Video: Stories from Canadian Military Families"
          },
          india: {
            heroTitle: "Honoring Their Sacrifice, Nurturing Their Homes",
            heroDescription: "A dedicated program to support Indian Armed Forces personnel and their families through the crucial journey of reintegration after service.",
            whyReintegration: {
              title: "The Importance of Family Reintegration in India",
              paragraphs: [
                "The transition from active military service to civilian family life poses distinct challenges for Indian Armed Forces personnel. After years of disciplined service, often in demanding and remote locations, adapting to the nuances of home life requires deliberate effort and support from both the individual and their family.",
                "Our initiative aims to provide essential resources and guidance to help service members and their families reconnect emotionally, address potential stresses, and build a harmonious home environment. This recognizes the profound impact of their service on family dynamics and seeks to ensure a smooth, dignified return to civilian normalcy."
              ],
              listItems: [
                "Strengthening family bonds through mutual understanding and shared experiences.",
                "Developing effective communication strategies for a harmonious household.",
                "Prioritizing the psychological and emotional well-being of all family members.",
                "Connecting with welfare organizations and support systems specific to Indian veterans and their families."
              ],
              image: "https://placehold.co/500x300/F97316/FFFFFF?text=IAF+Family+Support" // Specific image for India
            },
            resources: [
              {
                title: "Mental Health & Counseling (IAF)",
                description: "Access to psychological counseling, stress management techniques, and support groups offered by various defence welfare organizations and NGOs in India.",
                link: "#"
              },
              {
                title: "Family Welfare & Support (IAF)",
                description: "Details on Army Wives Welfare Association (AWWA), Navy Wives Welfare Association (NWWA), and Air Force Wives Welfare Association (AFWWA) initiatives, and family counseling centres.",
                link: "#"
              },
              {
                title: "Resettlement & Employment Aid (IAF)",
                description: "Information on Directorate General Resettlement (DGR) programs, vocational training, entrepreneurial support, and job placement assistance for ex-servicemen.",
                link: "#"
              },
              {
                title: "Community & Veteran Networks (IAF)",
                description: "Connecting with local Ex-servicemen Associations (ESM), Sainik Boards, and community initiatives for social integration and mutual support.",
                link: "#"
              },
              {
                title: "Children's Education & Support (IAF)",
                description: "Guidance on educational scholarships, counseling for children dealing with parental absence/reintegration, and special academic support programs.",
                link: "#"
              },
              {
                title: "Legal & Pension Guidance (IAF)",
                description: "Assistance with pension issues, legal advice on property matters, and guidance on various government schemes and benefits for veterans.",
                link: "#"
              }
            ],
            testimonials: [
              {
                quote: "After years of deployment, it was difficult to adjust to daily life. This program helped me and my family bridge that gap. We learned to communicate better.",
                author: "Havildar Rajesh K., Indian Army Veteran"
              },
              {
                quote: "The support from the welfare association was invaluable when my husband returned. It provided resources we didn't even know we needed.",
                author: "Priya S., Wife of an Indian Air Force Officer"
              }
            ],
            videoPlaceholderText: "Video: Insights from Indian Military Families"
          }
        };

        // Main App component
        const App = () => {
          // State for managing user authentication readiness
          const [isAuthReady, setIsAuthReady] = React.useState(false);
          // State for user ID
          const [userId, setUserId] = React.useState(null);
          // State for selected country, default to Canada
          const [selectedCountry, setSelectedCountry] = React.useState('canada');

          // State for LLM integration
          const [communicationPrompt, setCommunicationPrompt] = React.useState('');
          const [communicationTips, setCommunicationTips] = React.useState('');
          const [isLoadingTips, setIsLoadingTips] = React.useState(false);
          const [errorMessage, setErrorMessage] = React.useState('');

          // State for Community Forum
          const [messages, setMessages] = React.useState([]);
          const [newMessage, setNewMessage] = React.useState('');
          const [isPostingMessage, setIsPostingMessage] = React.useState(false);
          const [forumError, setForumError] = React.useState('');

          // Firebase instances
          const [db, setDb] = React.useState(null);
          const [auth, setAuth] = React.useState(null);


          React.useEffect(() => {
            const initializeFirebase = async () => {
                if (__firebase_config) {
                    try {
                        const app = initializeApp(__firebase_config);
                        const authInstance = getAuth(app);
                        const dbInstance = getFirestore(app);
                        setAuth(authInstance);
                        setDb(dbInstance);

                        onAuthStateChanged(authInstance, async (user) => {
                            if (user) {
                                setUserId(user.uid);
                            } else {
                                // Sign in anonymously if no authenticated user
                                try {
                                    if (__initial_auth_token) {
                                        await signInWithCustomToken(authInstance, __initial_auth_token);
                                    } else {
                                        await signInAnonymously(authInstance);
                                    }
                                    setUserId(authInstance.currentUser?.uid || crypto.randomUUID());
                                } catch (anonAuthError) {
                                    console.error("Anonymous authentication failed:", anonAuthError);
                                    setUserId(crypto.randomUUID()); // Fallback to random ID if auth fails
                                }
                            }
                            setIsAuthReady(true);
                        });
                    } catch (firebaseInitError) {
                        console.error("Firebase initialization failed:", firebaseInitError);
                        setErrorMessage("Failed to initialize the application. Please try again later.");
                        setIsAuthReady(true); // Continue with app, but show error
                    }
                } else {
                    // Fallback for when __firebase_config is not available (e.g., local development without Firebase setup)
                    console.warn("Firebase config not found. Running without persistence.");
                    setUserId(crypto.randomUUID());
                    setIsAuthReady(true);
                }
            };

            initializeFirebase();
          }, []); // Empty dependency array ensures this runs once on component mount

          React.useEffect(() => {
            if (isAuthReady && db && userId) {
                const messagesCollectionRef = collection(db, `artifacts/${__app_id}/public/data/communityMessages`);
                const q = query(messagesCollectionRef, orderBy('timestamp', 'asc')); // Order by timestamp

                const unsubscribe = onSnapshot(q, (snapshot) => {
                    const fetchedMessages = snapshot.docs.map(doc => ({
                        id: doc.id,
                        ...doc.data()
                    }));
                    setMessages(fetchedMessages);
                }, (error) => {
                    console.error("Error fetching messages:", error);
                    setForumError("Failed to load forum messages.");
                });

                // Clean up the listener when the component unmounts or dependencies change
                return () => unsubscribe();
            }
          }, [isAuthReady, db, userId, __app_id]); // Re-run if auth or db changes

          const currentContent = countryResources[selectedCountry];

          // Function to call Gemini API for communication tips
          const getGeminiCommunicationTips = async () => {
            if (!communicationPrompt.trim()) {
              setErrorMessage('Please describe the communication challenge.');
              return;
            }
            setIsLoadingTips(true);
            setErrorMessage('');
            setCommunicationTips(''); // Clear previous tips

            try {
              let chatHistory = [];
              const prompt = `Given the following communication challenge for an armed forces family reintegrating: "${communicationPrompt}", provide specific, actionable, and empathetic communication tips. Structure your response as a series of bullet points.`;
              chatHistory.push({ role: "user", parts: [{ text: prompt }] });
              const payload = { contents: chatHistory };
              const apiKey = ""; // Canvas will provide this in runtime

              const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
              const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
              });

              const result = await response.json();

              if (result.candidates && result.candidates.length > 0 &&
                  result.candidates[0].content && result.candidates[0].content.parts &&
                  result.candidates[0].content.parts.length > 0) {
                const text = result.candidates[0].content.parts[0].text;
                setCommunicationTips(text);
              } else {
                setErrorMessage('Failed to get tips. Please try again.');
                console.error('Gemini API response structure unexpected:', result);
              }
            } catch (error) {
              setErrorMessage('An error occurred while fetching tips. Please check your network connection.');
              console.error('Error calling Gemini API:', error);
            } finally {
              setIsLoadingTips(false);
            }
          };

          // Function to add a new message to the forum
          const postMessage = async () => {
            if (!newMessage.trim() || !db || !userId) {
              setForumError('Message cannot be empty or database/user not ready.');
              return;
            }
            setIsPostingMessage(true);
            setForumError('');
            try {
              const messagesCollectionRef = collection(db, `artifacts/${__app_id}/public/data/communityMessages`);
              await addDoc(messagesCollectionRef, {
                userId: userId,
                text: newMessage,
                timestamp: serverTimestamp() // Use Firestore's server timestamp
              });
              setNewMessage(''); // Clear input after posting
            } catch (error) {
              console.error("Error adding message:", error);
              setForumError("Failed to post message. Please try again.");
            } finally {
              setIsPostingMessage(false);
            }
          };

          if (!isAuthReady) {
            return (
              <div className="flex items-center justify-center min-h-screen bg-gray-100">
                <div className="text-xl text-gray-700">Loading program...</div>
              </div>
            );
          }

          return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 font-sans text-gray-800">
              {/* Header Section */}
              <header className="bg-white shadow-sm py-4 px-6 md:px-10 flex flex-col sm:flex-row justify-between items-center rounded-b-xl">
                <h1 className="text-3xl font-extrabold text-indigo-700 mb-2 sm:mb-0">
                  Family Reintegration Support
                </h1>
                <div className="flex items-center space-x-4 mt-2 sm:mt-0">
                  <nav className="text-lg font-medium">
                    <ul className="flex flex-wrap justify-center sm:justify-end space-x-4 md:space-x-6">
                      <li><a href="#" className="text-gray-600 hover:text-indigo-600 transition duration-300">Home</a></li>
                      <li><a href="#" className="text-gray-600 hover:text-indigo-600 transition duration-300">Resources</a></li>
                      <li><a href="#" className="text-gray-600 hover:text-indigo-600 transition duration-300">About Us</a></li>
                      <li><a href="#" className="text-gray-600 hover:text-indigo-600 transition duration-300">Contact</a></li>
                    </ul>
                  </nav>
                  {/* Country Selector */}
                  <select
                    className="p-2 border border-gray-300 rounded-md shadow-sm text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                    value={selectedCountry}
                    onChange={(e) => setSelectedCountry(e.target.value)}
                  >
                    <option value="canada">Canada</option>
                    <option value="india">India</option>
                  </select>
                </div>
              </header>

              {/* Hero Section */}
              <section className="relative bg-indigo-700 text-white py-20 px-6 md:px-10 text-center rounded-xl mx-4 my-8 shadow-lg overflow-hidden">
                <div className="absolute inset-0 bg-pattern opacity-10"></div> {/* Subtle background pattern */}
                <h2 className="text-4xl md:text-5xl font-bold mb-4 z-10 relative">
                  {currentContent.heroTitle}
                </h2>
                <p className="text-lg md:text-xl max-w-3xl mx-auto mb-8 z-10 relative">
                  {currentContent.heroDescription}
                </p>
                <button className="bg-white text-indigo-700 hover:bg-indigo-100 font-bold py-3 px-8 rounded-full shadow-lg transition duration-300 transform hover:scale-105 z-10 relative">
                  Learn More
                </button>
              </section>

              {/* Main Content Section */}
              <main className="container mx-auto px-4 py-8">
                {/* Why Reintegration Matters */}
                <section className="bg-white rounded-xl shadow-md p-8 mb-8">
                  <h3 className="text-3xl font-bold text-indigo-600 mb-6 text-center">
                    {currentContent.whyReintegration.title}
                  </h3>
                  <div className="grid md:grid-cols-2 gap-8 items-start">
                    <div>
                      {currentContent.whyReintegration.paragraphs.map((paragraph, index) => (
                        <p key={index} className="mb-4 text-lg leading-relaxed">{paragraph}</p>
                      ))}
                      <ul className="list-disc list-inside text-lg space-y-2">
                        {currentContent.whyReintegration.listItems.map((item, index) => (
                          <li key={index}>{item}</li>
                        ))}
                      </ul>
                    </div>
                    <div className="flex justify-center items-center">
                      <img
                        src={currentContent.whyReintegration.image}
                        alt="Family Support"
                        className="rounded-lg shadow-lg w-full max-w-md object-cover"
                        onError={(e) => { e.target.onerror = null; e.target.src = "https://placehold.co/500x300/6366F1/FFFFFF?text=Image+Error"; }}
                      />
                    </div>
                  </div>
                </section>

                {/* Resources Section */}
                <section className="bg-white rounded-xl shadow-md p-8 mb-8">
                  <h3 className="text-3xl font-bold text-indigo-600 mb-6 text-center">
                    Key Resources for {selectedCountry === 'canada' ? 'Canadian' : 'Indian'} Armed Forces
                  </h3>
                  <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {currentContent.resources.map((resource, index) => (
                      <div key={index} className="bg-blue-50 p-6 rounded-lg shadow-sm hover:shadow-md transition duration-300 transform hover:-translate-y-1">
                        <h4 className="text-xl font-semibold text-blue-800 mb-3">{resource.title}</h4>
                        <p className="text-gray-700 text-base mb-4">{resource.description}</p>
                        <a href={resource.link} className="text-indigo-600 hover:underline font-medium">Explore Resources &rarr;</a>
                      </div>
                    ))}
                  </div>
                </section>

                {/* Video Content Section */}
                <section className="bg-white rounded-xl shadow-md p-8 mb-8">
                  <h3 className="text-3xl font-bold text-indigo-600 mb-6 text-center">
                    Insights from Our Community
                  </h3>
                  <div className="flex justify-center">
                    <div className="relative w-full max-w-2xl bg-gray-200 rounded-lg overflow-hidden shadow-lg aspect-video">
                        {/* Placeholder for video content */}
                        <img
                            src="https://placehold.co/1280x720/A5B4FC/3730A3?text=Click+to+Play+Video"
                            alt="Video Thumbnail Placeholder"
                            className="w-full h-full object-cover"
                        />
                        <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-indigo-800 text-2xl font-bold">
                                {currentContent.videoPlaceholderText}
                            </span>
                        </div>
                        {/* In a real application, you would embed a video player here, e.g.:
                            <video controls className="w-full h-full">
                                <source src="your-video-url.mp4" type="video/mp4" />
                                Your browser does not support the video tag.
                            </video>
                        */}
                    </div>
                  </div>
                  <p className="text-center text-gray-600 mt-4 text-base">
                    *Note: Video content integration in this preview is represented by a placeholder image. In a live application, this would feature actual videos.
                  </p>
                </section>

                {/* ✨ AI-Powered Communication Assistant Section ✨ */}
                <section className="bg-white rounded-xl shadow-md p-8 mb-8">
                  <h3 className="text-3xl font-bold text-indigo-600 mb-6 text-center">
                    ✨ AI-Powered Communication Assistant ✨
                  </h3>
                  <p className="text-lg text-gray-700 mb-6 text-center max-w-2xl mx-auto">
                    Describe a communication challenge you're facing in your family reintegration journey, and our AI will provide personalized tips to help.
                  </p>
                  <div className="flex flex-col items-center">
                    <textarea
                      className="w-full max-w-xl p-4 border border-gray-300 rounded-lg mb-4 resize-y min-h-[120px] focus:outline-none focus:ring-2 focus:ring-indigo-500 text-lg"
                      placeholder="e.g., 'My child is withdrawn and doesn't want to talk about my deployment.' or 'My spouse and I are struggling to reconnect after a long separation.'"
                      value={communicationPrompt}
                      onChange={(e) => setCommunicationPrompt(e.target.value)}
                    ></textarea>
                    <button
                      className="bg-indigo-700 text-white hover:bg-indigo-800 font-bold py-3 px-8 rounded-full shadow-lg transition duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
                      onClick={getGeminiCommunicationTips}
                      disabled={isLoadingTips}
                    >
                      {isLoadingTips ? 'Generating Tips...' : 'Get Communication Tips ✨'}
                    </button>

                    {errorMessage && (
                      <p className="text-red-600 mt-4 text-center">{errorMessage}</p>
                    )}

                    {communicationTips && (
                      <div className="mt-8 p-6 bg-blue-50 rounded-lg shadow-inner w-full max-w-xl">
                        <h4 className="text-xl font-semibold text-blue-800 mb-4">Generated Tips:</h4>
                        {/* Using dangerouslySetInnerHTML to render potential markdown from LLM */}
                        <div className="prose max-w-none text-gray-800" dangerouslySetInnerHTML={{ __html: communicationTips.replace(/\n/g, '<br/>') }} />
                      </div>
                    )}
                  </div>
                </section>

                {/* 🫂 Community Forum Section */}
                <section className="bg-white rounded-xl shadow-md p-8 mb-8">
                  <h3 className="text-3xl font-bold text-indigo-600 mb-6 text-center">
                    🫂 Community Forum
                  </h3>
                  <p className="text-lg text-gray-700 mb-6 text-center max-w-2xl mx-auto">
                    Connect with other service members and families. Share your experiences, ask questions, and offer support.
                  </p>
                  <div className="flex flex-col items-center w-full max-w-2xl mx-auto">
                    {/* Message Input */}
                    <div className="w-full flex items-center space-x-2 mb-4">
                      <textarea
                        className="flex-grow p-3 border border-gray-300 rounded-lg resize-y min-h-[60px] focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Write your message here..."
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        rows="2"
                      ></textarea>
                      <button
                        className="bg-green-600 text-white hover:bg-green-700 font-bold py-3 px-6 rounded-full shadow-md transition duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
                        onClick={postMessage}
                        disabled={isPostingMessage || !newMessage.trim()}
                      >
                        {isPostingMessage ? 'Posting...' : 'Post'}
                      </button>
                    </div>
                    {forumError && (
                      <p className="text-red-600 mt-2 text-center">{forumError}</p>
                    )}

                    {/* Messages Display */}
                    <div className="w-full bg-gray-50 p-6 rounded-lg shadow-inner max-h-96 overflow-y-auto border border-gray-200">
                      {messages.length === 0 ? (
                        <p className="text-gray-500 text-center">No messages yet. Be the first to share!</p>
                      ) : (
                        <div className="space-y-4">
                          {messages.map((msg) => (
                            <div key={msg.id} className="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                                <div className="flex justify-between items-center mb-2">
                                    <span className="font-semibold text-indigo-700 text-sm md:text-base">User ID: {msg.userId}</span>
                                    {msg.timestamp && (
                                        <span className="text-gray-500 text-xs">
                                            {new Date(msg.timestamp.toDate()).toLocaleString()}
                                        </span>
                                    )}
                                </div>
                                <p className="text-gray-800 text-base leading-relaxed">{msg.text}</p>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </section>

                {/* Stories & Testimonials Section */}
                <section className="bg-white rounded-xl shadow-md p-8 mb-8">
                  <h3 className="text-3xl font-bold text-indigo-600 mb-6 text-center">
                    Stories of Reintegration & Hope
                  </h3>
                  <div className="grid md:grid-cols-2 gap-8">
                    {currentContent.testimonials.map((testimonial, index) => (
                      <div key={index} className="bg-gray-50 p-6 rounded-lg shadow-sm border border-gray-200">
                        <p className="italic text-gray-700 text-lg mb-4">"{testimonial.quote}"</p>
                        <p className="font-semibold text-right text-gray-800">- {testimonial.author}</p>
                      </div>
                    ))}
                  </div>
                </section>

                {/* Call to Action */}
                <section className="bg-indigo-600 text-white rounded-xl shadow-md p-8 text-center flex flex-col md:flex-row items-center justify-between">
                  <h3 className="text-2xl md:text-3xl font-bold mb-4 md:mb-0 md:mr-6">
                    Ready to get started? We're here to help.
                  </h3>
                  <button className="bg-white text-indigo-700 hover:bg-indigo-100 font-bold py-3 px-8 rounded-full shadow-lg transition duration-300 transform hover:scale-105">
                    Contact Us
                  </button>
                </section>
              </main>

              {/* Footer Section */}
              <footer className="bg-gray-800 text-white py-6 px-6 md:px-10 mt-8 rounded-t-xl">
                <div className="container mx-auto flex flex-col md:flex-row justify-between items-center text-center md:text-left">
                  <p className="text-sm mb-4 md:mb-0">
                    &copy; {new Date().getFullYear()} Family Reintegration Support. All rights reserved.
                  </p>
                  <div className="flex space-x-4">
                    <a href="#" className="text-gray-400 hover:text-white transition duration-300 text-sm">Privacy Policy</a>
                    <a href="#" className="text-gray-400 hover:text-white transition duration-300 text-sm">Terms of Service</a>
                  </div>
                </div>
              </footer>
            </div>
          );
        };

        // Render the App component into the root div
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);
    </script>
</body>
</html>
